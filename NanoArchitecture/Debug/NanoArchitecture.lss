
NanoArchitecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e11  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e0  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068c  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d1  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  000027f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <util/delay.h>
#include "Port.h"

int main(void)
{
DDRD |= 0xFF;// setting the pin PD3 as output
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
Port_Init(&Port_gkt_Config);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <Port_Init>
for(;;)

{

	PORTB |= 0xFF;//setting pin high
  a4:	9f ef       	ldi	r25, 0xFF	; 255
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	33 ed       	ldi	r19, 0xD3	; 211
  ae:	80 e3       	ldi	r24, 0x30	; 48
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x24>
  ba:	00 00       	nop

	_delay_ms(1000);//function name will differ for //atmel studio

	PORTB ^= 0xFF;//setting pin high
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	80 95       	com	r24
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	33 ed       	ldi	r19, 0xD3	; 211
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x32>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x3c>
  d2:	00 00       	nop
  d4:	e8 cf       	rjmp	.-48     	; 0xa6 <main+0x10>

000000d6 <Port_Init>:
*	\param
*	\return
*/
void Port_Init(const Port_ConfigType* pt_PortConfig)
{
	 RegInit_gv_Unmasked8Bits(pt_PortConfig);
  d6:	0e 94 6e 00 	call	0xdc	; 0xdc <RegInit_gv_Unmasked8Bits>
  da:	08 95       	ret

000000dc <RegInit_gv_Unmasked8Bits>:
*	\brief
*	\param 
*   \return
*/
void RegInit_gv_Unmasked8Bits(const RegInit_Unmasked8BitsConfigType* pt_Unmasked8BitsConfig)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	dc 01       	movw	r26, r24
	uint16 uc_I;
	for(uc_I = 0; uc_I < pt_Unmasked8BitsConfig->us_NumberOfRegisters; uc_I++)
  e2:	12 96       	adiw	r26, 0x02	; 2
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	13 97       	sbiw	r26, 0x03	; 3
  ea:	89 2b       	or	r24, r25
  ec:	c1 f0       	breq	.+48     	; 0x11e <RegInit_gv_Unmasked8Bits+0x42>
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
	{
		(*pt_Unmasked8BitsConfig->kpt_Registers[uc_I].puc_Register) = pt_Unmasked8BitsConfig->kpt_Registers[uc_I].uc_Value;
  f6:	ed 91       	ld	r30, X+
  f8:	fc 91       	ld	r31, X
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	e4 0f       	add	r30, r20
  fe:	f5 1f       	adc	r31, r21
 100:	c0 81       	ld	r28, Z
 102:	d1 81       	ldd	r29, Z+1	; 0x01
 104:	82 81       	ldd	r24, Z+2	; 0x02
 106:	88 83       	st	Y, r24
*   \return
*/
void RegInit_gv_Unmasked8Bits(const RegInit_Unmasked8BitsConfigType* pt_Unmasked8BitsConfig)
{
	uint16 uc_I;
	for(uc_I = 0; uc_I < pt_Unmasked8BitsConfig->us_NumberOfRegisters; uc_I++)
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	4d 5f       	subi	r20, 0xFD	; 253
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	12 96       	adiw	r26, 0x02	; 2
 112:	8d 91       	ld	r24, X+
 114:	9c 91       	ld	r25, X
 116:	13 97       	sbiw	r26, 0x03	; 3
 118:	28 17       	cp	r18, r24
 11a:	39 07       	cpc	r19, r25
 11c:	60 f3       	brcs	.-40     	; 0xf6 <RegInit_gv_Unmasked8Bits+0x1a>
	{
		(*pt_Unmasked8BitsConfig->kpt_Registers[uc_I].puc_Register) = pt_Unmasked8BitsConfig->kpt_Registers[uc_I].uc_Value;
	}
	
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
