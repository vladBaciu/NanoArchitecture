
NanoArchitecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080018e  0080018e  000003fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c0c  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbc  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00003bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3e  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  0000490a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 38       	cpi	r26, 0x8E	; 142
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e8       	ldi	r26, 0x8E	; 142
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "Adc.h"
#include "Uart.h"


int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	FILE Uart_t_Output = FDEV_SETUP_STREAM(Uart_gv_TransmitString_CH_0, NULL, _FDEV_SETUP_WRITE);
  ba:	fe 01       	movw	r30, r28
  bc:	31 96       	adiw	r30, 0x01	; 1
  be:	8e e0       	ldi	r24, 0x0E	; 14
  c0:	df 01       	movw	r26, r30
  c2:	1d 92       	st	X+, r1
  c4:	8a 95       	dec	r24
  c6:	e9 f7       	brne	.-6      	; 0xc2 <main+0x1c>
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	8c 83       	std	Y+4, r24	; 0x04
  cc:	8e ec       	ldi	r24, 0xCE	; 206
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	9a 87       	std	Y+10, r25	; 0x0a
  d2:	89 87       	std	Y+9, r24	; 0x09
	stdout = &Uart_t_Output;
  d4:	f0 93 93 01 	sts	0x0193, r31	; 0x800193 <__iob+0x3>
  d8:	e0 93 92 01 	sts	0x0192, r30	; 0x800192 <__iob+0x2>

	Port_Init(&Port_gkt_Config);
  dc:	81 e1       	ldi	r24, 0x11	; 17
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	0e 94 a7 00 	call	0x14e	; 0x14e <Port_Init>
	Uart_gv_Init(&Uart_gkt_Cfg);
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 aa 00 	call	0x154	; 0x154 <Uart_gv_Init>

	for(;;)

	{

		printf("saca\n");
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 3a 01 	call	0x274	; 0x274 <puts>
		Dio_WritePort(DIO_PORTB,0xFF);
  f4:	6f ef       	ldi	r22, 0xFF	; 255
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 95 00 	call	0x12a	; 0x12a <Dio_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	bf ef       	ldi	r27, 0xFF	; 255
  fe:	23 ed       	ldi	r18, 0xD3	; 211
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	b1 50       	subi	r27, 0x01	; 1
 104:	20 40       	sbci	r18, 0x00	; 0
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x5c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x66>
 10c:	00 00       	nop
		_delay_ms(1000);//function name will differ for //atmel studio

		Dio_WritePort(DIO_PORTB,0x00);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 95 00 	call	0x12a	; 0x12a <Dio_WritePort>
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	a3 ed       	ldi	r26, 0xD3	; 211
 11a:	b0 e3       	ldi	r27, 0x30	; 48
 11c:	91 50       	subi	r25, 0x01	; 1
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	b0 40       	sbci	r27, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x76>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x80>
 126:	00 00       	nop
 128:	e1 cf       	rjmp	.-62     	; 0xec <main+0x46>

0000012a <Dio_WritePort>:
* \param      PortId: the index of the port in the list of ports.
* \return     Returns the state of the channels.
*/
Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
	return (Dio_PortLevelType) *Dio_gkat_PortAdressRead[PortId].pt_Registers;
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	fc 01       	movw	r30, r24
 132:	eb 5f       	subi	r30, 0xFB	; 251
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	01 90       	ld	r0, Z+
 138:	f0 81       	ld	r31, Z
 13a:	e0 2d       	mov	r30, r0
 13c:	20 81       	ld	r18, Z
	uint8 uc_PortValue;
	uc_PortValue = Dio_ReadPort(PortId);
	uc_PortValue = Level & uc_PortValue;
	uc_PortValue = Level | uc_PortValue;
	
	*Dio_gkat_PortAdressWrite[PortId].pt_Registers = uc_PortValue;
 13e:	fc 01       	movw	r30, r24
 140:	e5 5f       	subi	r30, 0xF5	; 245
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	01 90       	ld	r0, Z+
 146:	f0 81       	ld	r31, Z
 148:	e0 2d       	mov	r30, r0
 14a:	60 83       	st	Z, r22
 14c:	08 95       	ret

0000014e <Port_Init>:
*	\param
*	\return
*/
void Port_Init(const Port_ConfigType* pt_PortConfig)
{
	 RegInit_gv_Unmasked8Bits(pt_PortConfig);
 14e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <RegInit_gv_Unmasked8Bits>
 152:	08 95       	ret

00000154 <Uart_gv_Init>:
	while (Uart_gt_GetReceiveStatus(t_ChannelId) == UART_RX_NO_DATA)
	{

	};
	*puc_ReceiveAddr =  (uint8) *Uart_pt_GroupsConfig[t_ChannelId].pt_Registers[UART_RECEIVE_REGISTER];
}
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	9b 81       	ldd	r25, Y+3	; 0x03
 15e:	0e 94 08 01 	call	0x210	; 0x210 <RegInit_gv_Masked8Bits>
 162:	88 81       	ld	r24, Y
 164:	99 81       	ldd	r25, Y+1	; 0x01
 166:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
 16a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <Uart_gt_DataRegisterStatus>:
 174:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
 178:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
 17c:	f9 01       	movw	r30, r18
 17e:	95 e1       	ldi	r25, 0x15	; 21
 180:	89 9f       	mul	r24, r25
 182:	e0 0d       	add	r30, r0
 184:	f1 1d       	adc	r31, r1
 186:	11 24       	eor	r1, r1
 188:	01 80       	ldd	r0, Z+1	; 0x01
 18a:	f2 81       	ldd	r31, Z+2	; 0x02
 18c:	e0 2d       	mov	r30, r0
 18e:	80 81       	ld	r24, Z
 190:	85 fb       	bst	r24, 5
 192:	88 27       	eor	r24, r24
 194:	80 f9       	bld	r24, 0
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	89 27       	eor	r24, r25
 19a:	08 95       	ret

0000019c <Uart_gv_TransmitString_CH_0>:
* \param   
* \param   
* \return  -
*/
void Uart_gv_TransmitString_CH_0(char uc_Byte, FILE * pt_Stream)
{
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
	
	if (uc_Byte == '\n')
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	19 f4       	brne	.+6      	; 0x1aa <Uart_gv_TransmitString_CH_0+0xe>
	{
			Uart_gv_TransmitString_CH_0('\r',pt_Stream);
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	0e 94 ce 00 	call	0x19c	; 0x19c <Uart_gv_TransmitString_CH_0>
	}
	while(Uart_gt_DataRegisterStatus(UART_TX_D_1) == UART_DATA_REG_NOT_EMPTY);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 ba 00 	call	0x174	; 0x174 <Uart_gt_DataRegisterStatus>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	d9 f3       	breq	.-10     	; 0x1aa <Uart_gv_TransmitString_CH_0+0xe>
	  *Uart_pt_GroupsConfig[UART_TX_D_1].pt_Registers[UART_TRANSMIT_REGISTER] = uc_Byte;
 1b4:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__data_end>
 1b8:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__data_end+0x1>
 1bc:	03 80       	ldd	r0, Z+3	; 0x03
 1be:	f4 81       	ldd	r31, Z+4	; 0x04
 1c0:	e0 2d       	mov	r30, r0
 1c2:	c0 83       	st	Z, r28
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <RegInit_gv_Unmasked8Bits>:
	for(uc_I = 0; uc_I < pt_Unmasked16BitsConfig->us_NumberOfRegisters; uc_I++)
	{
		(*pt_Unmasked16BitsConfig->kpt_Registers[uc_I].pus_Register) = pt_Unmasked16BitsConfig->kpt_Registers[uc_I].us_Value;
	}
	
}
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	dc 01       	movw	r26, r24
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	8d 91       	ld	r24, X+
 1d2:	9c 91       	ld	r25, X
 1d4:	13 97       	sbiw	r26, 0x03	; 3
 1d6:	89 2b       	or	r24, r25
 1d8:	c1 f0       	breq	.+48     	; 0x20a <RegInit_gv_Unmasked8Bits+0x42>
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	ed 91       	ld	r30, X+
 1e4:	fc 91       	ld	r31, X
 1e6:	11 97       	sbiw	r26, 0x01	; 1
 1e8:	e4 0f       	add	r30, r20
 1ea:	f5 1f       	adc	r31, r21
 1ec:	c0 81       	ld	r28, Z
 1ee:	d1 81       	ldd	r29, Z+1	; 0x01
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	88 83       	st	Y, r24
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	4d 5f       	subi	r20, 0xFD	; 253
 1fa:	5f 4f       	sbci	r21, 0xFF	; 255
 1fc:	12 96       	adiw	r26, 0x02	; 2
 1fe:	8d 91       	ld	r24, X+
 200:	9c 91       	ld	r25, X
 202:	13 97       	sbiw	r26, 0x03	; 3
 204:	28 17       	cp	r18, r24
 206:	39 07       	cpc	r19, r25
 208:	60 f3       	brcs	.-40     	; 0x1e2 <RegInit_gv_Unmasked8Bits+0x1a>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <RegInit_gv_Masked8Bits>:
*	\brief
*	\param
*   \return
*/
extern void RegInit_gv_Masked8Bits(const RegInit_Masked8BitsConfigType* pt_Masked8BitsConfig)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	1f 92       	push	r1
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	bc 01       	movw	r22, r24
		uint16 uc_I;
		volatile uint8 uc_RegVal;
		for(uc_I = 0; uc_I < pt_Masked8BitsConfig->us_NumberOfRegisters; uc_I++)
 21c:	dc 01       	movw	r26, r24
 21e:	12 96       	adiw	r26, 0x02	; 2
 220:	8d 91       	ld	r24, X+
 222:	9c 91       	ld	r25, X
 224:	13 97       	sbiw	r26, 0x03	; 3
 226:	89 2b       	or	r24, r25
 228:	09 f1       	breq	.+66     	; 0x26c <RegInit_gv_Masked8Bits+0x5c>
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
		{
			uc_RegVal = *pt_Masked8BitsConfig->kpt_Registers[uc_I].puc_Register;
 232:	db 01       	movw	r26, r22
 234:	ed 91       	ld	r30, X+
 236:	fc 91       	ld	r31, X
 238:	e4 0f       	add	r30, r20
 23a:	f5 1f       	adc	r31, r21
 23c:	a0 81       	ld	r26, Z
 23e:	b1 81       	ldd	r27, Z+1	; 0x01
 240:	8c 91       	ld	r24, X
 242:	89 83       	std	Y+1, r24	; 0x01
			uc_RegVal &= pt_Masked8BitsConfig->kpt_Registers[uc_I].uc_AndMask;
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	92 81       	ldd	r25, Z+2	; 0x02
 248:	98 23       	and	r25, r24
 24a:	99 83       	std	Y+1, r25	; 0x01
			uc_RegVal |= pt_Masked8BitsConfig->kpt_Registers[uc_I].uc_OrMask;
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	98 2b       	or	r25, r24
 252:	99 83       	std	Y+1, r25	; 0x01
			(*pt_Masked8BitsConfig->kpt_Registers[uc_I].puc_Register) = uc_RegVal;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	8c 93       	st	X, r24
*/
extern void RegInit_gv_Masked8Bits(const RegInit_Masked8BitsConfigType* pt_Masked8BitsConfig)
{
		uint16 uc_I;
		volatile uint8 uc_RegVal;
		for(uc_I = 0; uc_I < pt_Masked8BitsConfig->us_NumberOfRegisters; uc_I++)
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	4c 5f       	subi	r20, 0xFC	; 252
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	fb 01       	movw	r30, r22
 262:	82 81       	ldd	r24, Z+2	; 0x02
 264:	93 81       	ldd	r25, Z+3	; 0x03
 266:	28 17       	cp	r18, r24
 268:	39 07       	cpc	r19, r25
 26a:	18 f3       	brcs	.-58     	; 0x232 <RegInit_gv_Masked8Bits+0x22>
			uc_RegVal = *pt_Masked8BitsConfig->kpt_Registers[uc_I].puc_Register;
			uc_RegVal &= pt_Masked8BitsConfig->kpt_Registers[uc_I].uc_AndMask;
			uc_RegVal |= pt_Masked8BitsConfig->kpt_Registers[uc_I].uc_OrMask;
			(*pt_Masked8BitsConfig->kpt_Registers[uc_I].puc_Register) = uc_RegVal;
		}
}
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <puts>:
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__iob+0x2>
 280:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__iob+0x3>
 284:	23 81       	ldd	r18, Z+3	; 0x03
 286:	21 ff       	sbrs	r18, 1
 288:	1b c0       	rjmp	.+54     	; 0x2c0 <puts+0x4c>
 28a:	8c 01       	movw	r16, r24
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	f8 01       	movw	r30, r16
 292:	81 91       	ld	r24, Z+
 294:	8f 01       	movw	r16, r30
 296:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <__iob+0x2>
 29a:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <__iob+0x3>
 29e:	db 01       	movw	r26, r22
 2a0:	18 96       	adiw	r26, 0x08	; 8
 2a2:	ed 91       	ld	r30, X+
 2a4:	fc 91       	ld	r31, X
 2a6:	19 97       	sbiw	r26, 0x09	; 9
 2a8:	88 23       	and	r24, r24
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <puts+0x44>
 2ac:	09 95       	icall
 2ae:	89 2b       	or	r24, r25
 2b0:	79 f3       	breq	.-34     	; 0x290 <puts+0x1c>
 2b2:	df ef       	ldi	r29, 0xFF	; 255
 2b4:	cf ef       	ldi	r28, 0xFF	; 255
 2b6:	ec cf       	rjmp	.-40     	; 0x290 <puts+0x1c>
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	09 95       	icall
 2bc:	89 2b       	or	r24, r25
 2be:	19 f0       	breq	.+6      	; 0x2c6 <puts+0x52>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	9f ef       	ldi	r25, 0xFF	; 255
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <puts+0x56>
 2c6:	8d 2f       	mov	r24, r29
 2c8:	9c 2f       	mov	r25, r28
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
