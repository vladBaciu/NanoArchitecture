
NanoArchitecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001257  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ada  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008aa  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000085c  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a9  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "Dio.h"
#include "Adc.h"

int main(void)
{
DDRD |= 0xFF;// setting the pin PD3 as output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
Port_Init(&Port_gkt_Config);
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 87 00 	call	0x10e	; 0x10e <Port_Init>
for(;;)

{

	
Dio_WritePort(DIO_PORTB,0xFF);
  b4:	6f ef       	ldi	r22, 0xFF	; 255
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 75 00 	call	0xea	; 0xea <Dio_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x26>
  cc:	00 00       	nop
	_delay_ms(1000);//function name will differ for //atmel studio

Dio_WritePort(DIO_PORTB,0x00);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 75 00 	call	0xea	; 0xea <Dio_WritePort>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x36>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x40>
  e6:	00 00       	nop
  e8:	e5 cf       	rjmp	.-54     	; 0xb4 <main+0xe>

000000ea <Dio_WritePort>:
* \param      PortId: the index of the port in the list of ports.
* \return     Returns the state of the channels.
*/
Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
	return (Dio_PortLevelType) *Dio_gkat_PortAdressRead[PortId].pt_Registers;
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	fc 01       	movw	r30, r24
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	01 90       	ld	r0, Z+
  f8:	f0 81       	ld	r31, Z
  fa:	e0 2d       	mov	r30, r0
  fc:	20 81       	ld	r18, Z
	uint8 uc_PortValue;
	uc_PortValue = Dio_ReadPort(PortId);
	uc_PortValue = Level & uc_PortValue;
	uc_PortValue = Level | uc_PortValue;
	
	*Dio_gkat_PortAdressWrite[PortId].pt_Registers = uc_PortValue;
  fe:	fc 01       	movw	r30, r24
 100:	ea 5f       	subi	r30, 0xFA	; 250
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	01 90       	ld	r0, Z+
 106:	f0 81       	ld	r31, Z
 108:	e0 2d       	mov	r30, r0
 10a:	60 83       	st	Z, r22
 10c:	08 95       	ret

0000010e <Port_Init>:
*	\param
*	\return
*/
void Port_Init(const Port_ConfigType* pt_PortConfig)
{
	 RegInit_gv_Unmasked8Bits(pt_PortConfig);
 10e:	0e 94 8a 00 	call	0x114	; 0x114 <RegInit_gv_Unmasked8Bits>
 112:	08 95       	ret

00000114 <RegInit_gv_Unmasked8Bits>:
*	\brief
*	\param 
*   \return
*/
void RegInit_gv_Unmasked8Bits(const RegInit_Unmasked8BitsConfigType* pt_Unmasked8BitsConfig)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	dc 01       	movw	r26, r24
	uint16 uc_I;
	for(uc_I = 0; uc_I < pt_Unmasked8BitsConfig->us_NumberOfRegisters; uc_I++)
 11a:	12 96       	adiw	r26, 0x02	; 2
 11c:	8d 91       	ld	r24, X+
 11e:	9c 91       	ld	r25, X
 120:	13 97       	sbiw	r26, 0x03	; 3
 122:	89 2b       	or	r24, r25
 124:	c1 f0       	breq	.+48     	; 0x156 <RegInit_gv_Unmasked8Bits+0x42>
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
	{
		(*pt_Unmasked8BitsConfig->kpt_Registers[uc_I].puc_Register) = pt_Unmasked8BitsConfig->kpt_Registers[uc_I].uc_Value;
 12e:	ed 91       	ld	r30, X+
 130:	fc 91       	ld	r31, X
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	e4 0f       	add	r30, r20
 136:	f5 1f       	adc	r31, r21
 138:	c0 81       	ld	r28, Z
 13a:	d1 81       	ldd	r29, Z+1	; 0x01
 13c:	82 81       	ldd	r24, Z+2	; 0x02
 13e:	88 83       	st	Y, r24
*   \return
*/
void RegInit_gv_Unmasked8Bits(const RegInit_Unmasked8BitsConfigType* pt_Unmasked8BitsConfig)
{
	uint16 uc_I;
	for(uc_I = 0; uc_I < pt_Unmasked8BitsConfig->us_NumberOfRegisters; uc_I++)
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	4d 5f       	subi	r20, 0xFD	; 253
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	12 96       	adiw	r26, 0x02	; 2
 14a:	8d 91       	ld	r24, X+
 14c:	9c 91       	ld	r25, X
 14e:	13 97       	sbiw	r26, 0x03	; 3
 150:	28 17       	cp	r18, r24
 152:	39 07       	cpc	r19, r25
 154:	60 f3       	brcs	.-40     	; 0x12e <RegInit_gv_Unmasked8Bits+0x1a>
	{
		(*pt_Unmasked8BitsConfig->kpt_Registers[uc_I].puc_Register) = pt_Unmasked8BitsConfig->kpt_Registers[uc_I].uc_Value;
	}
	
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
